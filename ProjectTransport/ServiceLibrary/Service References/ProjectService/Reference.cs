//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceLibrary.ProjectService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProjectService.IClientService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddRoute", ReplyAction="http://tempuri.org/IClientService/AddRouteResponse")]
        bool AddRoute(GPSDataService.Models.Route data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddRoute", ReplyAction="http://tempuri.org/IClientService/AddRouteResponse")]
        System.Threading.Tasks.Task<bool> AddRouteAsync(GPSDataService.Models.Route data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddRoutes", ReplyAction="http://tempuri.org/IClientService/AddRoutesResponse")]
        bool AddRoutes(GPSDataService.Models.Route[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddRoutes", ReplyAction="http://tempuri.org/IClientService/AddRoutesResponse")]
        System.Threading.Tasks.Task<bool> AddRoutesAsync(GPSDataService.Models.Route[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAllRoutes", ReplyAction="http://tempuri.org/IClientService/GetAllRoutesResponse")]
        GPSDataService.Models.Route[] GetAllRoutes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetAllRoutes", ReplyAction="http://tempuri.org/IClientService/GetAllRoutesResponse")]
        System.Threading.Tasks.Task<GPSDataService.Models.Route[]> GetAllRoutesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetRouteById", ReplyAction="http://tempuri.org/IClientService/GetRouteByIdResponse")]
        GPSDataService.Models.Route GetRouteById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetRouteById", ReplyAction="http://tempuri.org/IClientService/GetRouteByIdResponse")]
        System.Threading.Tasks.Task<GPSDataService.Models.Route> GetRouteByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/UpdateRoute", ReplyAction="http://tempuri.org/IClientService/UpdateRouteResponse")]
        bool UpdateRoute(GPSDataService.Models.Route route);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/UpdateRoute", ReplyAction="http://tempuri.org/IClientService/UpdateRouteResponse")]
        System.Threading.Tasks.Task<bool> UpdateRouteAsync(GPSDataService.Models.Route route);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Test", ReplyAction="http://tempuri.org/IClientService/TestResponse")]
        string Test();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Test", ReplyAction="http://tempuri.org/IClientService/TestResponse")]
        System.Threading.Tasks.Task<string> TestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Delete", ReplyAction="http://tempuri.org/IClientService/DeleteResponse")]
        bool Delete(GPSDataService.Models.Route route);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Delete", ReplyAction="http://tempuri.org/IClientService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(GPSDataService.Models.Route route);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddData", ReplyAction="http://tempuri.org/IClientService/AddDataResponse")]
        bool AddData(GPSDataService.Models.GPSData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/AddData", ReplyAction="http://tempuri.org/IClientService/AddDataResponse")]
        System.Threading.Tasks.Task<bool> AddDataAsync(GPSDataService.Models.GPSData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/UpdateData", ReplyAction="http://tempuri.org/IClientService/UpdateDataResponse")]
        bool UpdateData(GPSDataService.Models.GPSData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/UpdateData", ReplyAction="http://tempuri.org/IClientService/UpdateDataResponse")]
        System.Threading.Tasks.Task<bool> UpdateDataAsync(GPSDataService.Models.GPSData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteData", ReplyAction="http://tempuri.org/IClientService/DeleteDataResponse")]
        bool DeleteData(GPSDataService.Models.GPSData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DeleteData", ReplyAction="http://tempuri.org/IClientService/DeleteDataResponse")]
        System.Threading.Tasks.Task<bool> DeleteDataAsync(GPSDataService.Models.GPSData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/RequestValidationToken", ReplyAction="http://tempuri.org/IClientService/RequestValidationTokenResponse")]
        string RequestValidationToken();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/RequestValidationToken", ReplyAction="http://tempuri.org/IClientService/RequestValidationTokenResponse")]
        System.Threading.Tasks.Task<string> RequestValidationTokenAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Login", ReplyAction="http://tempuri.org/IClientService/LoginResponse")]
        string Login([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Login", ReplyAction="http://tempuri.org/IClientService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Register", ReplyAction="http://tempuri.org/IClientService/RegisterResponse")]
        string Register(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/Register", ReplyAction="http://tempuri.org/IClientService/RegisterResponse")]
        System.Threading.Tasks.Task<string> RegisterAsync(string login, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientServiceChannel : ServiceLibrary.ProjectService.IClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientServiceClient : System.ServiceModel.ClientBase<ServiceLibrary.ProjectService.IClientService>, ServiceLibrary.ProjectService.IClientService {
        
        public ClientServiceClient() {
        }
        
        public ClientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddRoute(GPSDataService.Models.Route data) {
            return base.Channel.AddRoute(data);
        }
        
        public System.Threading.Tasks.Task<bool> AddRouteAsync(GPSDataService.Models.Route data) {
            return base.Channel.AddRouteAsync(data);
        }
        
        public bool AddRoutes(GPSDataService.Models.Route[] data) {
            return base.Channel.AddRoutes(data);
        }
        
        public System.Threading.Tasks.Task<bool> AddRoutesAsync(GPSDataService.Models.Route[] data) {
            return base.Channel.AddRoutesAsync(data);
        }
        
        public GPSDataService.Models.Route[] GetAllRoutes() {
            return base.Channel.GetAllRoutes();
        }
        
        public System.Threading.Tasks.Task<GPSDataService.Models.Route[]> GetAllRoutesAsync() {
            return base.Channel.GetAllRoutesAsync();
        }
        
        public GPSDataService.Models.Route GetRouteById(int id) {
            return base.Channel.GetRouteById(id);
        }
        
        public System.Threading.Tasks.Task<GPSDataService.Models.Route> GetRouteByIdAsync(int id) {
            return base.Channel.GetRouteByIdAsync(id);
        }
        
        public bool UpdateRoute(GPSDataService.Models.Route route) {
            return base.Channel.UpdateRoute(route);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRouteAsync(GPSDataService.Models.Route route) {
            return base.Channel.UpdateRouteAsync(route);
        }
        
        public string Test() {
            return base.Channel.Test();
        }
        
        public System.Threading.Tasks.Task<string> TestAsync() {
            return base.Channel.TestAsync();
        }
        
        public bool Delete(GPSDataService.Models.Route route) {
            return base.Channel.Delete(route);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(GPSDataService.Models.Route route) {
            return base.Channel.DeleteAsync(route);
        }
        
        public bool AddData(GPSDataService.Models.GPSData data) {
            return base.Channel.AddData(data);
        }
        
        public System.Threading.Tasks.Task<bool> AddDataAsync(GPSDataService.Models.GPSData data) {
            return base.Channel.AddDataAsync(data);
        }
        
        public bool UpdateData(GPSDataService.Models.GPSData data) {
            return base.Channel.UpdateData(data);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateDataAsync(GPSDataService.Models.GPSData data) {
            return base.Channel.UpdateDataAsync(data);
        }
        
        public bool DeleteData(GPSDataService.Models.GPSData data) {
            return base.Channel.DeleteData(data);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDataAsync(GPSDataService.Models.GPSData data) {
            return base.Channel.DeleteDataAsync(data);
        }
        
        public string RequestValidationToken() {
            return base.Channel.RequestValidationToken();
        }
        
        public System.Threading.Tasks.Task<string> RequestValidationTokenAsync() {
            return base.Channel.RequestValidationTokenAsync();
        }
        
        public string Login(string login1, string password) {
            return base.Channel.Login(login1, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string login, string password) {
            return base.Channel.LoginAsync(login, password);
        }
        
        public string Register(string login, string password) {
            return base.Channel.Register(login, password);
        }
        
        public System.Threading.Tasks.Task<string> RegisterAsync(string login, string password) {
            return base.Channel.RegisterAsync(login, password);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProjectService.IRemoteService")]
    public interface IRemoteService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteService/RemoteAddRoute", ReplyAction="http://tempuri.org/IRemoteService/RemoteAddRouteResponse")]
        bool RemoteAddRoute(GPSDataService.Models.Route data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRemoteService/RemoteAddRoute", ReplyAction="http://tempuri.org/IRemoteService/RemoteAddRouteResponse")]
        System.Threading.Tasks.Task<bool> RemoteAddRouteAsync(GPSDataService.Models.Route data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoteServiceChannel : ServiceLibrary.ProjectService.IRemoteService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoteServiceClient : System.ServiceModel.ClientBase<ServiceLibrary.ProjectService.IRemoteService>, ServiceLibrary.ProjectService.IRemoteService {
        
        public RemoteServiceClient() {
        }
        
        public RemoteServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RemoteServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RemoteAddRoute(GPSDataService.Models.Route data) {
            return base.Channel.RemoteAddRoute(data);
        }
        
        public System.Threading.Tasks.Task<bool> RemoteAddRouteAsync(GPSDataService.Models.Route data) {
            return base.Channel.RemoteAddRouteAsync(data);
        }
    }
}
